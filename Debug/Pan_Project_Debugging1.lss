
Pan_Project_Debugging1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000222  000002b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000222  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010a  0080010a  000002c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a9d  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a8  00000000  00000000  00000e25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000338  00000000  00000000  000016cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  00001a08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000468  00000000  00000000  00001af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000232  00000000  00000000  00001f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002192  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	fd c0       	rjmp	.+506    	; 0x200 <__vector_1>
   6:	00 00       	nop
   8:	e0 c0       	rjmp	.+448    	; 0x1ca <__vector_2>
   a:	00 00       	nop
   c:	ea c0       	rjmp	.+468    	; 0x1e2 <__vector_3>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e2       	ldi	r30, 0x22	; 34
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 30       	cpi	r26, 0x0B	; 11
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	44 d0       	rcall	.+136    	; 0x14c <main>
  c4:	ac c0       	rjmp	.+344    	; 0x21e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <buttonInit>:

	return 0;
}

void buttonInit(BUTTON *button, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinNum)
{
  c8:	fc 01       	movw	r30, r24
	button->ddr = ddr;
  ca:	71 83       	std	Z+1, r23	; 0x01
  cc:	60 83       	st	Z, r22
	button->pin = pin;
  ce:	53 83       	std	Z+3, r21	; 0x03
  d0:	42 83       	std	Z+2, r20	; 0x02
	button->btnPin = pinNum;
  d2:	24 83       	std	Z+4, r18	; 0x04
	*button->ddr &= ~(1<<button->btnPin); //버튼 핀을 입력 상태로
  d4:	fb 01       	movw	r30, r22
  d6:	30 81       	ld	r19, Z
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <buttonInit+0x1a>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	2a 95       	dec	r18
  e4:	e2 f7       	brpl	.-8      	; 0xde <buttonInit+0x16>
  e6:	80 95       	com	r24
  e8:	83 23       	and	r24, r19
  ea:	80 83       	st	Z, r24
  ec:	08 95       	ret

000000ee <panInit>:
}

void panInit()
{
	PAN_DDR |= (1 << DDRB4); // OC0 핀을 출력으로 설정
  ee:	87 b3       	in	r24, 0x17	; 23
  f0:	80 61       	ori	r24, 0x10	; 16
  f2:	87 bb       	out	0x17, r24	; 23
	TCCR0 |= (1 << WGM00) | (1 << COM01) | (1 << WGM01) | (1 << CS01) | (1 << CS00); //Fast PWM 모드
  f4:	83 b7       	in	r24, 0x33	; 51
  f6:	8b 66       	ori	r24, 0x6B	; 107
  f8:	83 bf       	out	0x33, r24	; 51
  fa:	08 95       	ret

000000fc <spinningPan>:
}

void spinningPan(volatile uint8_t play)
{
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	1f 92       	push	r1
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
 106:	89 83       	std	Y+1, r24	; 0x01
	switch (play)
 108:	89 81       	ldd	r24, Y+1	; 0x01
 10a:	81 30       	cpi	r24, 0x01	; 1
 10c:	31 f0       	breq	.+12     	; 0x11a <spinningPan+0x1e>
 10e:	18 f0       	brcs	.+6      	; 0x116 <spinningPan+0x1a>
 110:	82 30       	cpi	r24, 0x02	; 2
 112:	31 f0       	breq	.+12     	; 0x120 <spinningPan+0x24>
 114:	07 c0       	rjmp	.+14     	; 0x124 <spinningPan+0x28>
	{
		case STOP_PAN:
		OCR0 = 0;
 116:	11 be       	out	0x31, r1	; 49
		break;
 118:	05 c0       	rjmp	.+10     	; 0x124 <spinningPan+0x28>
		
		case WEAK_WIND:
		OCR0 = 127;
 11a:	8f e7       	ldi	r24, 0x7F	; 127
 11c:	81 bf       	out	0x31, r24	; 49
		break;
 11e:	02 c0       	rjmp	.+4      	; 0x124 <spinningPan+0x28>
		
		case STRONG_WIND:
		OCR0 = 254;
 120:	8e ef       	ldi	r24, 0xFE	; 254
 122:	81 bf       	out	0x31, r24	; 49
		break;
	}
}
 124:	0f 90       	pop	r0
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <fndDisplay>:

void fndDisplay(volatile uint8_t play)
{
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	1f 92       	push	r1
 132:	cd b7       	in	r28, 0x3d	; 61
 134:	de b7       	in	r29, 0x3e	; 62
 136:	89 83       	std	Y+1, r24	; 0x01
	LED_PORT = FND_Number[play];
 138:	e9 81       	ldd	r30, Y+1	; 0x01
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	e0 50       	subi	r30, 0x00	; 0
 13e:	ff 4f       	sbci	r31, 0xFF	; 255
 140:	80 81       	ld	r24, Z
 142:	8b bb       	out	0x1b, r24	; 27
}
 144:	0f 90       	pop	r0
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <main>:
void panInit();
void spinningPan(volatile uint8_t play);
void fndDisplay(volatile uint8_t play);

int main(void)
{
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
 154:	2f 97       	sbiw	r28, 0x0f	; 15
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	f8 94       	cli
 15a:	de bf       	out	0x3e, r29	; 62
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	cd bf       	out	0x3d, r28	; 61
	BUTTON btn0, btn1, btn2;
	
	buttonInit(&btn0, &BUTTON_DDR, &BUTTON_PIN, BUTTON_OFF);
 160:	21 e0       	ldi	r18, 0x01	; 1
 162:	40 e3       	ldi	r20, 0x30	; 48
 164:	50 e0       	ldi	r21, 0x00	; 0
 166:	61 e3       	ldi	r22, 0x31	; 49
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	ce 01       	movw	r24, r28
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	ac df       	rcall	.-168    	; 0xc8 <buttonInit>
	buttonInit(&btn1, &BUTTON_DDR, &BUTTON_PIN, BUTTON_WEAK);
 170:	22 e0       	ldi	r18, 0x02	; 2
 172:	40 e3       	ldi	r20, 0x30	; 48
 174:	50 e0       	ldi	r21, 0x00	; 0
 176:	61 e3       	ldi	r22, 0x31	; 49
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	ce 01       	movw	r24, r28
 17c:	06 96       	adiw	r24, 0x06	; 6
 17e:	a4 df       	rcall	.-184    	; 0xc8 <buttonInit>
	buttonInit(&btn2, &BUTTON_DDR, &BUTTON_PIN, BUTTON_STRONG);
 180:	20 e0       	ldi	r18, 0x00	; 0
 182:	40 e3       	ldi	r20, 0x30	; 48
 184:	50 e0       	ldi	r21, 0x00	; 0
 186:	61 e3       	ldi	r22, 0x31	; 49
 188:	70 e0       	ldi	r23, 0x00	; 0
 18a:	ce 01       	movw	r24, r28
 18c:	0b 96       	adiw	r24, 0x0b	; 11
 18e:	9c df       	rcall	.-200    	; 0xc8 <buttonInit>
	
	DDRA = 0xff; //FND를 출력 모드로 설정
 190:	8f ef       	ldi	r24, 0xFF	; 255
 192:	8a bb       	out	0x1a, r24	; 26
	PORTA = FND_Number[curState];
 194:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	e0 50       	subi	r30, 0x00	; 0
 19c:	ff 4f       	sbci	r31, 0xFF	; 255
 19e:	80 81       	ld	r24, Z
	panInit();
 1a0:	8b bb       	out	0x1b, r24	; 27
 1a2:	a5 df       	rcall	.-182    	; 0xee <panInit>
	
	// 외부 인터럽트 설정 (INT1, INT2, INT3 사용)
	EIMSK |= (1 << INT1) | (1 << INT2) | (1 << INT0); // INT1, INT2, INT3 활성화
 1a4:	89 b7       	in	r24, 0x39	; 57
 1a6:	87 60       	ori	r24, 0x07	; 7
 1a8:	89 bf       	out	0x39, r24	; 57
	EICRA |= (1 << ISC11) | (1 << ISC21) | (1 << ISC01); // INT1, INT2, INT3을 하강엣지(1,0)에서 트리거
 1aa:	ea e6       	ldi	r30, 0x6A	; 106
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	8a 62       	ori	r24, 0x2A	; 42
 1b2:	80 83       	st	Z, r24
	EIFR |= (1 << INTF1) | (1 << INTF2) | (1 << INTF0); // 인터럽트 플래그 초기화
 1b4:	88 b7       	in	r24, 0x38	; 56
 1b6:	87 60       	ori	r24, 0x07	; 7

	
	sei(); // 전역 인터럽트 활성화
 1b8:	88 bf       	out	0x38, r24	; 56

	while (1)
	{
		spinningPan(curState);
 1ba:	78 94       	sei
 1bc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
		fndDisplay(curState);
 1c0:	9d df       	rcall	.-198    	; 0xfc <spinningPan>
 1c2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1c6:	b2 df       	rcall	.-156    	; 0x12c <fndDisplay>
 1c8:	f9 cf       	rjmp	.-14     	; 0x1bc <main+0x70>

000001ca <__vector_2>:
{
	LED_PORT = FND_Number[play];
}

// 외부 인터럽트 ISR (PD1 ~ PD3 버튼 제어)
ISR(INT1_vect) { curState = STOP_PAN; }
 1ca:	1f 92       	push	r1
 1cc:	0f 92       	push	r0
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	0f 92       	push	r0
 1d2:	11 24       	eor	r1, r1
 1d4:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <__vector_3>:
ISR(INT2_vect) { curState = WEAK_WIND; }
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	8f 93       	push	r24
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 1f4:	8f 91       	pop	r24
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <__vector_1>:
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	8f 93       	push	r24
 20c:	82 e0       	ldi	r24, 0x02	; 2
 20e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 212:	8f 91       	pop	r24
 214:	0f 90       	pop	r0
 216:	0f be       	out	0x3f, r0	; 63
 218:	0f 90       	pop	r0
 21a:	1f 90       	pop	r1
 21c:	18 95       	reti

0000021e <_exit>:
 21e:	f8 94       	cli

00000220 <__stop_program>:
 220:	ff cf       	rjmp	.-2      	; 0x220 <__stop_program>
